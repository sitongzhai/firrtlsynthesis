#line 2 "firrtl_lex.cc"

#line 4 "firrtl_lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer firrtl_create_buffer
#define yy_delete_buffer firrtl_delete_buffer
#define yy_flex_debug firrtl_flex_debug
#define yy_init_buffer firrtl_init_buffer
#define yy_flush_buffer firrtl_flush_buffer
#define yy_load_buffer_state firrtl_load_buffer_state
#define yy_switch_to_buffer firrtl_switch_to_buffer
#define yyin firrtlin
#define yyleng firrtlleng
#define yylex firrtllex
#define yylineno firrtllineno
#define yyout firrtlout
#define yyrestart firrtlrestart
#define yytext firrtltext
#define yywrap firrtlwrap
#define yyalloc firrtlalloc
#define yyrealloc firrtlrealloc
#define yyfree firrtlfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE firrtlrestart(firrtlin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int firrtlleng;

extern FILE *firrtlin, *firrtlout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE firrtllex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-firrtllineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < firrtlleng; ++yyl )\
                    if ( firrtltext[yyl] == '\n' )\
                        --firrtllineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up firrtltext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up firrtltext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via firrtlrestart()), so that the user can continue scanning by
	 * just pointing firrtlin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when firrtltext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int firrtlleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow firrtlwrap()'s to do buffer switches
 * instead of setting up a fresh firrtlin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void firrtlrestart (FILE *input_file  );
void firrtl_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE firrtl_create_buffer (FILE *file,int size  );
void firrtl_delete_buffer (YY_BUFFER_STATE b  );
void firrtl_flush_buffer (YY_BUFFER_STATE b  );
void firrtlpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void firrtlpop_buffer_state (void );

static void firrtlensure_buffer_stack (void );
static void firrtl_load_buffer_state (void );
static void firrtl_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER firrtl_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE firrtl_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE firrtl_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE firrtl_scan_bytes (yyconst char *bytes,int len  );

void *firrtlalloc (yy_size_t  );
void *firrtlrealloc (void *,yy_size_t  );
void firrtlfree (void *  );

#define yy_new_buffer firrtl_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        firrtlensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            firrtl_create_buffer(firrtlin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        firrtlensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            firrtl_create_buffer(firrtlin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define firrtlwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *firrtlin = (FILE *) 0, *firrtlout = (FILE *) 0;

typedef int yy_state_type;

extern int firrtllineno;

int firrtllineno = 1;

extern char *firrtltext;
#define yytext_ptr firrtltext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up firrtltext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	firrtlleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 131
#define YY_END_OF_BUFFER 132
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[448] =
    {   0,
      129,  129,    0,    0,  121,  121,  122,  122,  132,  130,
      129,  131,  125,  128,  131,   99,  123,  100,  109,  110,
      131,   98,   96,  115,   95,  127,  106,  108,  107,   97,
      131,  123,  123,  123,  123,  123,  123,  123,  111,  112,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  113,  114,  121,  121,  115,  121,  121,  121,  121,
      122,  122,  129,  128,  123,  116,  124,    0,  115,  127,
      102,  104,  101,  103,  105,    0,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,    0,  119,

      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,   47,  123,  123,  123,   45,    0,  117,  117,  123,
       88,  123,   43,  123,  123,  123,  123,  123,  123,    0,
      118,   23,  123,   64,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  121,  121,  116,  115,  121,  119,  121,
      117,  121,  118,  122,  122,  120,    0,    0,  126,  123,
      123,  123,  123,  123,  123,  123,  123,   38,   63,  123,
      123,  123,  123,  123,  123,  123,  119,  123,   69,  123,
      123,  123,   60,  123,  123,  123,  123,   41,  123,  123,

      123,  123,   46,  117,  117,  123,  123,  123,  123,  123,
        0,   44,   16,  123,  123,   40,   36,   61,   48,   20,
      123,   62,  118,   19,   67,  123,   49,  123,  123,  123,
      123,   79,   42,  123,  123,   56,   57,  123,  123,  123,
      123,   39,  123,  123,  123,  123,  123,  123,  123,  123,
       65,    0,  126,  123,  123,  123,  123,  123,  123,    7,
        6,   66,  123,  123,  123,  123,  123,  123,  123,   70,
      123,   77,   17,  123,   74,  123,  123,   58,   59,   94,
      123,   14,   71,   73,  123,  123,   22,  123,    0,  123,
      123,   33,  123,  123,  123,   86,   84,  123,   75,   24,

       18,   78,   90,   72,  123,  123,   93,   15,   80,   76,
      123,   68,    0,  120,  123,  123,   10,    8,  123,   12,
      123,  123,  123,  123,  123,  123,  123,  123,    0,  123,
       26,  123,   83,    4,  123,    0,  123,   82,  123,  123,
      123,    0,  123,  123,   81,  123,  123,   85,   13,  123,
      123,  123,  123,  123,  123,   52,   50,   92,  123,    0,
      123,  123,  123,    0,    2,    5,  123,   91,    0,    0,
       30,  123,  123,  123,    0,   31,  123,  123,  123,   53,
      123,  123,    1,    0,   34,  123,   89,    0,  123,    0,
        0,  123,  123,   37,    0,  123,    9,  123,  123,  123,

        0,  123,    0,  123,    0,    0,  123,  123,    0,  123,
      123,  123,  123,   25,    3,    0,   35,    0,    0,  123,
       21,    0,   11,  123,  123,   55,   87,    0,    0,   32,
        0,  123,  123,    0,    0,    0,   51,   54,   27,    0,
        0,    0,   28,    0,    0,   29,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    6,    1,    7,    1,    1,    8,    9,
       10,    1,   11,   12,   13,   14,    1,   15,   15,   16,
       16,   16,   16,   16,   16,   17,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   26,   28,   29,
        7,    7,   30,    7,    7,    7,    7,    7,    7,   31,
        7,   32,   33,    7,   34,    7,    7,    7,    7,    7,
       35,   36,   37,    1,    7,    1,   38,   39,   40,   41,

       42,   43,   44,   45,   46,    7,   47,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   62,   63,    1,   64,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[65] =
    {   0,
        1,    1,    2,    3,    1,    4,    5,    6,    1,    1,
        1,    1,    1,    7,    8,    8,    8,    1,    1,    1,
        1,    1,    1,    1,    8,    8,    8,    8,    8,    5,
        5,    5,    5,    5,    1,    1,    1,    8,    8,    8,
        8,    8,    8,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    1,    1
    } ;

static yyconst flex_int16_t yy_base[458] =
    {   0,
        0,    1,    6,    0,   68,  117,   72,   74,  656,  657,
       84,  657,  657,  657,  652,  657,    0,  657,  657,  657,
       75,  657,  657,   79,  657,    0,   85,  632,  631,  657,
      617,   47,  603,  604,  599,  606,  617,  616,  657,  657,
       59,  111,   89,  103,   83,  597,   31,  158,   61,   61,
      108,   97,  165,  113,  113,  167,  606,  593,  604,  118,
      590,  657,  657,  604,  174,  189,   82,  215,  241,  223,
      603,   93,  177,  657,    0,  178,  624,  216,  226,    0,
      657,  657,  657,  657,  657,  166,  599,  575,  584,  574,
      577,  577,  581,  580,  588,  587,  260,  571,  611,  610,

      568,  567,  568,  575,  578,  563,  562,  175,  559,  571,
      560,    0,  558,  567,  559,    0,    0,  233,  234,  248,
      606,  557,    0,  560,  567,  556,   92,  242,  105,  233,
      245,    0,  565,  551,  548,   58,  557,  543,  258,  545,
      163,  554,  557,  541,  546,  557,  549,  553,  545,  550,
       88,  183,  537,  554,  171,  282,  293,  235,  238,  224,
      251,  289,  296,  553,  284,  299,  285,  287,  294,  540,
      537,  546,  543,  542,  541,  526,  525,    0,  526,  524,
      530,  531,  526,  545,  544,  535,  557,  516,    0,  530,
      517,  519,    0,  529,  514,  515,  508,    0,  280,  521,

      513,  509,    0,    0,  306,  508,  517,  501,  501,  518,
      120,    0,    0,  498,  500,    0,    0,    0,    0,    0,
      511,    0,  320,    0,    0,  500,    0,  513,  500,  495,
      507,    0,    0,  505,  494,    0,    0,  493,  495,  481,
      490,    0,  493,  498,  493,  488,  495,  491,  483,  478,
      479,  327,  309,  481,  491,  483,  488,  474,  471,    0,
        0,    0,  465,  474,  464,  467,  472,  471,  480,    0,
      462,    0,    0,  505,    0,  479,  471,    0,    0,    0,
      464,    0,  326,    0,  460,  457,    0,  464,  461,  462,
      453,    0,  451,  458,  450,    0,  313,  449,    0,    0,

        0,    0,    0,    0,  461,  462,    0,    0,    0,    0,
      460,    0,  334,  337,  457,  468,    0,    0,  441,    0,
      448,  457,  454,  453,  438,  437,  447,  445,  434,  440,
        0,  447,    0,    0,  441,  428,  443,    0,  428,  441,
      439,  308,  427,  426,    0,  433,  432,  320,    0,  435,
      438,  435,  427,  432,  418,    0,    0,    0,  415,  409,
      427,  411,  426,  428,    0,    0,  409,    0,  426,  413,
        0,  416,  411,  417,  411,    0,  403,  409,  424,    0,
      424,  396,    0,  401,    0,  404,    0,  403,  408,  393,
      407,  391,  404,    0,  407,  402,    0,  401,  391,  403,

      398,  397,  386,  374,  383,  382,  376,  376,  360,  352,
      349,  355,  352,  657,    0,  332,    0,  321,  316,  315,
        0,  325,    0,  324,  314,    0,  657,  323,  349,    0,
      311,  304,  303,  297,  298,  238,    0,    0,  657,  219,
      204,  217,  657,  199,  146,  657,  657,  374,  382,  390,
      394,  398,  406,  414,  422,  430,  162
    } ;

static yyconst flex_int16_t yy_def[458] =
    {   0,
      448,  448,  447,    3,  449,  449,  450,  450,  447,  447,
      447,  447,  447,  447,  447,  447,  451,  447,  447,  447,
      447,  447,  447,  452,  447,  453,  447,  447,  447,  447,
      447,  451,  451,  451,  451,  451,  451,  451,  447,  447,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  447,  447,  454,  454,  454,  454,  454,  454,  454,
      455,  455,  447,  447,  451,  447,  452,  447,  452,  453,
      447,  447,  447,  447,  447,  456,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  447,  451,

      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  457,   48,   48,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  447,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  454,  454,  454,  454,  454,  454,   69,
       69,  454,  454,  455,  455,  447,  456,  456,  456,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  447,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,

      451,  451,  451,  457,   48,  451,  451,  451,  451,  451,
      447,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  447,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  447,  456,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,   48,  451,  451,  451,  451,  451,  447,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,

      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  447,  447,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  447,  451,
      451,  451,  451,  451,  451,  447,  451,  451,  451,  451,
      451,  447,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  447,
      451,  451,  451,  447,  451,  451,  451,  451,  447,  447,
      451,  451,  451,  451,  447,  451,  451,  451,  451,  451,
      451,  451,  451,  447,  451,  451,  451,  447,  451,  447,
      447,  451,  451,  451,  447,  451,  451,  451,  451,  451,

      447,  451,  447,  451,  447,  447,  451,  451,  447,  451,
      451,  451,  451,  447,  451,  447,  451,  447,  447,  451,
      451,  447,  451,  451,  451,  451,  447,  447,  447,  451,
      447,  451,  451,  447,  447,  447,  451,  451,  447,  447,
      447,  447,  447,  447,  447,  447,    0,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447
    } ;

static yyconst flex_int16_t yy_nxt[722] =
    {   0,
      447,   11,   11,  447,   11,   11,   12,   13,   14,   15,
       13,   16,   17,   18,   19,   20,   21,   22,   21,   23,
       24,   24,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   17,   33,   17,   34,   35,   17,   36,   37,   38,
       39,   12,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   17,   50,   51,   52,   53,   54,   17,   55,
       56,   57,   58,   59,   60,   61,   17,   17,   62,   63,
       12,   12,  115,   12,   12,   12,   12,   12,   65,   12,
       65,   12,   66,   66,   66,   73,  116,  154,   73,   76,
       76,   76,   78,   79,   79,   79,   87,   81,  227,   95,

      164,   88,  122,   67,   82,   83,   68,   72,   96,   72,
      120,  228,   69,   97,   98,  121,  123,  155,   70,   12,
       12,   99,   12,   99,  211,  100,  102,   65,  165,   65,
      111,   66,   66,   66,  103,  112,  104,  105,  128,  216,
      107,  247,  113,  248,  108,  221,  106,  129,  109,  124,
      136,  217,   67,  138,  139,   68,  101,  110,  125,  126,
      222,   69,  150,  151,  127,  289,  137,   70,  117,  204,
      117,  152,  118,  118,  118,  130,  154,  130,   73,  131,
      131,   73,  118,  118,  118,  118,  118,  446,  156,  156,
      156,   78,   76,   76,   76,  118,  118,  118,  118,  119,

      118,  168,  169,  157,  157,  157,  155,  132,  140,  155,
      236,  141,  133,  142,  195,  143,  237,  196,  134,  144,
      249,  135,  145,  146,  155,  158,  197,  158,  250,  159,
      166,  166,  166,  162,  154,  162,  154,  163,  163,   78,
       79,   79,   79,  447,  447,  447,  447,  223,  223,  159,
      155,  160,  159,  160,  445,  161,  161,  161,  155,  131,
      131,  154,  444,  154,  443,  161,  161,  161,  161,  161,
      155,  205,  442,  155,  118,  118,  155,  441,  161,  161,
      161,  161,  161,  161,  180,  218,  181,  206,  182,  183,
      207,  164,  184,  185,  219,  231,  156,  156,  156,  208,

      220,  232,  209,  163,  163,  210,  233,  157,  157,  157,
      163,  163,  234,  166,  166,  166,  447,  155,  447,  165,
      168,  169,  168,  253,  155,  342,  252,  278,  155,  168,
      169,  155,  375,  279,  223,  223,  447,  313,  447,  313,
      252,  314,  314,  314,  168,  169,  283,  118,  314,  314,
      314,  314,  314,  314,  343,  369,  440,  439,  438,  437,
      436,  435,  434,  433,  370,  432,  431,  118,  430,  429,
      428,  344,  427,  376,   10,   10,   10,   10,   10,   10,
       10,   10,   64,   64,   64,   64,   64,   64,   64,   64,
       71,   71,   71,   71,   71,   71,   71,   71,   75,  426,

      425,   75,   77,  424,   77,   77,   80,  423,   80,   80,
       80,   80,   80,   80,  154,  422,  421,  420,  154,  154,
      154,  154,  164,  419,  418,  164,  164,  417,  164,  164,
      167,  416,  167,  167,  167,  167,  167,  167,  415,  414,
      413,  412,  411,  410,  409,  408,  407,  406,  405,  404,
      403,  402,  401,  400,  399,  398,  397,  396,  395,  394,
      393,  392,  391,  390,  389,  388,  387,  386,  385,  384,
      383,  382,  381,  380,  379,  378,  377,  374,  373,  372,
      371,  368,  367,  366,  365,  364,  363,  362,  361,  360,
      359,  358,  357,  356,  355,  354,  353,  352,  351,  350,

      349,  348,  347,  346,  345,  341,  340,  339,  338,  337,
      336,  335,  334,  333,  332,  331,  330,  329,  328,  327,
      326,  325,  324,  323,  322,  321,  320,  319,  318,  317,
      316,  315,  312,  311,  310,  309,  308,  307,  306,  305,
      304,  303,  302,  301,  300,  299,  298,  297,  296,  295,
      294,  293,  292,  291,  290,  288,  287,  286,  285,  284,
      282,  281,  280,  277,  276,  275,  274,  273,  272,  271,
      270,  187,  269,  268,  267,  266,  265,  264,  263,  262,
      261,  260,  259,  258,  257,  256,  255,  254,  165,  155,
      251,  246,  245,  244,  243,  242,  241,  240,  239,  238,

      235,  230,  229,  226,  225,  224,  215,  214,  213,  212,
      211,  203,  202,  201,  200,  199,  198,  194,  193,  192,
      191,  190,  189,  188,  100,  187,  186,  179,  178,  177,
      176,  175,  174,  173,  172,  171,  170,  447,  165,  155,
      153,  149,  148,  147,  114,   94,   93,   92,   91,   90,
       89,   86,   85,   84,   74,  447,    9,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,

      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447
    } ;

static yyconst flex_int16_t yy_chk[722] =
    {   0,
        0,    1,    2,    0,    1,    2,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        5,    5,   47,    5,    7,    7,    8,    8,    5,    7,
        5,    8,    5,    5,    5,   11,   47,   67,   11,   21,
       21,   21,   24,   24,   24,   24,   32,   27,  136,   41,

       72,   32,   50,    5,   27,   27,    5,    7,   41,    8,
       49,  136,    5,   41,   41,   49,   50,   67,    5,    6,
        6,   42,    6,   42,  211,   42,   43,    6,   72,    6,
       45,    6,    6,    6,   43,   45,   43,   43,   52,  127,
       44,  151,   45,  151,   44,  129,   43,   52,   44,   51,
       54,  127,    6,   55,   55,    6,   42,   44,   51,   51,
      129,    6,   60,   60,   51,  211,   54,    6,   48,  457,
       48,   60,   48,   48,   48,   53,  155,   53,   73,   53,
       53,   73,   48,   48,   48,   48,   48,  445,   65,   65,
       65,   76,   76,   76,   76,   48,   48,   48,   48,   48,

       48,   86,   86,   66,   66,   66,  155,   53,   56,   65,
      141,   56,   53,   56,  108,   56,  141,  108,   53,   56,
      152,   53,   56,   56,   66,   68,  108,   68,  152,   68,
       78,   78,   78,   70,  160,   70,  160,   70,   70,   79,
       79,   79,   79,  118,  119,  118,  119,  130,  130,  158,
       68,   69,  159,   69,  444,   69,   69,   69,   70,  131,
      131,  161,  442,  161,  441,   69,   69,   69,   69,   69,
      158,  119,  440,  159,  118,  119,   69,  436,   69,   69,
       69,   69,   69,   69,   97,  128,   97,  120,   97,   97,
      120,  165,   97,   97,  128,  139,  156,  156,  156,  120,

      128,  139,  120,  162,  162,  120,  139,  157,  157,  157,
      163,  163,  139,  166,  166,  166,  205,  156,  205,  165,
      167,  167,  168,  168,  162,  297,  166,  199,  157,  169,
      169,  163,  348,  199,  223,  223,  283,  252,  283,  252,
      166,  252,  252,  252,  253,  253,  205,  205,  313,  313,
      313,  314,  314,  314,  297,  342,  435,  434,  433,  432,
      431,  429,  428,  425,  342,  424,  422,  283,  420,  419,
      418,  297,  416,  348,  448,  448,  448,  448,  448,  448,
      448,  448,  449,  449,  449,  449,  449,  449,  449,  449,
      450,  450,  450,  450,  450,  450,  450,  450,  451,  413,

      412,  451,  452,  411,  452,  452,  453,  410,  453,  453,
      453,  453,  453,  453,  454,  409,  408,  407,  454,  454,
      454,  454,  455,  406,  405,  455,  455,  404,  455,  455,
      456,  403,  456,  456,  456,  456,  456,  456,  402,  401,
      400,  399,  398,  396,  395,  393,  392,  391,  390,  389,
      388,  386,  384,  382,  381,  379,  378,  377,  375,  374,
      373,  372,  370,  369,  367,  364,  363,  362,  361,  360,
      359,  355,  354,  353,  352,  351,  350,  347,  346,  344,
      343,  341,  340,  339,  337,  336,  335,  332,  330,  329,
      328,  327,  326,  325,  324,  323,  322,  321,  319,  316,

      315,  311,  306,  305,  298,  295,  294,  293,  291,  290,
      289,  288,  286,  285,  281,  277,  276,  274,  271,  269,
      268,  267,  266,  265,  264,  263,  259,  258,  257,  256,
      255,  254,  251,  250,  249,  248,  247,  246,  245,  244,
      243,  241,  240,  239,  238,  235,  234,  231,  230,  229,
      228,  226,  221,  215,  214,  210,  209,  208,  207,  206,
      202,  201,  200,  197,  196,  195,  194,  192,  191,  190,
      188,  187,  186,  185,  184,  183,  182,  181,  180,  179,
      177,  176,  175,  174,  173,  172,  171,  170,  164,  154,
      153,  150,  149,  148,  147,  146,  145,  144,  143,  142,

      140,  138,  137,  135,  134,  133,  126,  125,  124,  122,
      121,  115,  114,  113,  111,  110,  109,  107,  106,  105,
      104,  103,  102,  101,  100,   99,   98,   96,   95,   94,
       93,   92,   91,   90,   89,   88,   87,   77,   71,   64,
       61,   59,   58,   57,   46,   38,   37,   36,   35,   34,
       33,   31,   29,   28,   15,    9,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,

      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  447,
      447
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[132] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int firrtl_flex_debug;
int firrtl_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *firrtltext;
#line 1 "firrtl.l"
#line 3 "firrtl.l"
//******************************************************************************
//* Author: Sitong Zhai
//* Created: 2021-08-20
//* run with flex 2.5.35
//* command: flex -P firrtl firrtl.l
//* Last updated: 2022-05-15
//******************************************************************************

#include <stdbool.h>
#ifdef WIN32
#include <io.h>
#else
#include <unistd.h>
#endif
#include "db/fir_db.h"
#include "firrtl_tab.h"

bool double_quoted = false;
bool single_quoted = false;

int firrtlcolumn = 1;
#define YY_USER_ACTION firrtllloc.first_line = firrtllloc.last_line = firrtllineno; \
    firrtllloc.first_column = firrtlcolumn; firrtllloc.last_column = firrtlcolumn + firrtlleng - 1; \
    firrtlcolumn += firrtlleng;


#define YY_NO_UNISTD_H 1
/*%option debug*/



#line 838 "firrtl_lex.cc"

#define INITIAL 0
#define NORMAL 1
#define STATE_DOUBLE_QUOTED 2
#define STATE_SINGLE_QUOTED 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int firrtllex_destroy (void );

int firrtlget_debug (void );

void firrtlset_debug (int debug_flag  );

YY_EXTRA_TYPE firrtlget_extra (void );

void firrtlset_extra (YY_EXTRA_TYPE user_defined  );

FILE *firrtlget_in (void );

void firrtlset_in  (FILE * in_str  );

FILE *firrtlget_out (void );

void firrtlset_out  (FILE * out_str  );

int firrtlget_leng (void );

char *firrtlget_text (void );

int firrtlget_lineno (void );

void firrtlset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int firrtlwrap (void );
#else
extern int firrtlwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( firrtltext, firrtlleng, 1, firrtlout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( firrtlin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( firrtlin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, firrtlin))==0 && ferror(firrtlin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(firrtlin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int firrtllex (void);

#define YY_DECL int firrtllex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after firrtltext and firrtlleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 68 "firrtl.l"


#line 1026 "firrtl_lex.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! firrtlin )
			firrtlin = stdin;

		if ( ! firrtlout )
			firrtlout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			firrtlensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				firrtl_create_buffer(firrtlin,YY_BUF_SIZE );
		}

		firrtl_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of firrtltext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 448 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 657 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < firrtlleng; ++yyl )
				if ( firrtltext[yyl] == '\n' )
					   
    firrtllineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 70 "firrtl.l"
{ /*BEGIN(STATE_ID);*/ return kCIRCUIT; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 71 "firrtl.l"
{ /*BEGIN(STATE_ID);*/ return kMODULE; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 72 "firrtl.l"
{ /*BEGIN(STATE_ID);*/ return kEXTMODULE; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 73 "firrtl.l"
{ /*BEGIN(STATE_ID);*/ return kINPUT; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 74 "firrtl.l"
{ /*BEGIN(STATE_ID);*/ return kOUTPUT; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 75 "firrtl.l"
{ return kUINT; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 76 "firrtl.l"
{ return kSINT; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 77 "firrtl.l"
{ return kFIXED; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 78 "firrtl.l"
{ return kINTERVAL; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 79 "firrtl.l"
{ return kCLOCK; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 80 "firrtl.l"
{ return kASYNCRESET; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 81 "firrtl.l"
{ return kRESET; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 82 "firrtl.l"
{ return kANALOG; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 83 "firrtl.l"
{ return kFLIP; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 84 "firrtl.l"
{ return kWIRE; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 85 "firrtl.l"
{ return kMEM; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 86 "firrtl.l"
{ return kCMEM; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 87 "firrtl.l"
{ return kSMEM; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 88 "firrtl.l"
{ return kOLD; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 89 "firrtl.l"
{ return kNEW; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 90 "firrtl.l"
{ return kUNDEFINED; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 91 "firrtl.l"
{ return kINST; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 92 "firrtl.l"
{ return kOF; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 93 "firrtl.l"
{ return kSKIP; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 94 "firrtl.l"
{ return kDATATYPE; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 95 "firrtl.l"
{ return kDEPTH; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 96 "firrtl.l"
{ return kREADLATENCY; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 97 "firrtl.l"
{ return kWRITELATENCY; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 98 "firrtl.l"
{ return kREADUNDERWRITE; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 99 "firrtl.l"
{ return kREADER; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 100 "firrtl.l"
{ return kWRITER; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 101 "firrtl.l"
{ return kREADWRITER; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 102 "firrtl.l"
{ return kNODE; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 103 "firrtl.l"
{ return kDEFNAME; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 104 "firrtl.l"
{ return kPARAMETER; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 105 "firrtl.l"
{ return kMUX; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 106 "firrtl.l"
{ return kVALIDIF; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 107 "firrtl.l"
{ return kPRIMOPADD; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 108 "firrtl.l"
{ return kPRIMOPSUB; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 109 "firrtl.l"
{ return kPRIMOPMUL; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 110 "firrtl.l"
{ return kPRIMOPDIV; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 111 "firrtl.l"
{ return kPRIMOPREM; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 112 "firrtl.l"
{ return kPRIMOPLT; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 113 "firrtl.l"
{ return kPRIMOPLEQ; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 114 "firrtl.l"
{ return kPRIMOPGT; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 115 "firrtl.l"
{ return kPRIMOPGEQ; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 116 "firrtl.l"
{ return kPRIMOPEQ; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 117 "firrtl.l"
{ return kPRIMOPNEQ; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 118 "firrtl.l"
{ return kPRIMOPPAD; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 119 "firrtl.l"
{ return kPRIMOPASUINT; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 120 "firrtl.l"
{ return kPRIMOPASASYNCRESET; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 121 "firrtl.l"
{ return kPRIMOPASSINT; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 122 "firrtl.l"
{ return kPRIMOPASCLOCK; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 123 "firrtl.l"
{ return kPRIMOPASFIXEDPOINT; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 124 "firrtl.l"
{ return kPRIMOPASINTERVAL; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 125 "firrtl.l"
{ return kPRIMOPSHL; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 126 "firrtl.l"
{ return kPRIMOPSHR; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 127 "firrtl.l"
{ return kPRIMOPDSHL; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 128 "firrtl.l"
{ return kPRIMOPDSHR; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 129 "firrtl.l"
{ return kPRIMOPCVT; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 130 "firrtl.l"
{ return kPRIMOPNEG; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 131 "firrtl.l"
{ return kPRIMOPNOT; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 132 "firrtl.l"
{ return kPRIMOPAND; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 133 "firrtl.l"
{ return kPRIMOPOR; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 134 "firrtl.l"
{ return kPRIMOPXOR; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 135 "firrtl.l"
{ return kPRIMOPANDR; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 136 "firrtl.l"
{ return kPRIMOPORR; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 137 "firrtl.l"
{ return kPRIMOPXORR; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 138 "firrtl.l"
{ return kPRIMOPCAT; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 139 "firrtl.l"
{ return kPRIMOPBITS; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 140 "firrtl.l"
{ return kPRIMOPHEAD; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 141 "firrtl.l"
{ return kPRIMOPTAIL; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 142 "firrtl.l"
{ return kPRIMOPINCP; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 143 "firrtl.l"
{ return kPRIMOPDECP; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 144 "firrtl.l"
{ return kPRIMOPSETP; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 145 "firrtl.l"
{ return kPRIMOPWRAP; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 146 "firrtl.l"
{ return kPRIMOPCLIP; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 147 "firrtl.l"
{ return kPRIMOPSQUZ; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 148 "firrtl.l"
{ return kREG; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 149 "firrtl.l"
{ return kWITH; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 150 "firrtl.l"
{ return kREGRESET; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 151 "firrtl.l"
{ return kMPORT; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 152 "firrtl.l"
{ return kINFER; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 153 "firrtl.l"
{ return kREAD; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 154 "firrtl.l"
{ return kWRITE; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 155 "firrtl.l"
{ return kRDWR; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 156 "firrtl.l"
{ return kISINVALID; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 157 "firrtl.l"
{ return kIS; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 158 "firrtl.l"
{ return kINVALID; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 159 "firrtl.l"
{ return kSTOP; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 160 "firrtl.l"
{ return kPRINTF; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 161 "firrtl.l"
{ return kATTACH; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 162 "firrtl.l"
{ return kWHEN; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 163 "firrtl.l"
{ return kELSE; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 166 "firrtl.l"
{ return kCOLON; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 167 "firrtl.l"
{ return kDOT; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 168 "firrtl.l"
{ return kQUESTION_MARK; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 169 "firrtl.l"
{ return kCOMMA; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 170 "firrtl.l"
{ 
                        if (double_quoted) {
                          double_quoted = false;
                        } else {
                          BEGIN(STATE_DOUBLE_QUOTED);
                          double_quoted = true;
                        }
                        return kQUOTATION_MARK; 
                      }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 179 "firrtl.l"
{ 
                        if (single_quoted) {
                          single_quoted = false;
                        } else {
                          BEGIN(STATE_SINGLE_QUOTED);
                          single_quoted = true;
                        }
                        return kAPOSTROPHE; 
                      }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 188 "firrtl.l"
{ return kCONNECT; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 189 "firrtl.l"
{ return kPARTIAL_CONNECT; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 190 "firrtl.l"
{ return kASSIGN; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 191 "firrtl.l"
{ return kBRACKET_SL; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 192 "firrtl.l"
{ return kBRACKET_SR; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 193 "firrtl.l"
{ return kBRACKET_L; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 194 "firrtl.l"
{ return kBRACKET_R; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 195 "firrtl.l"
{ return kEQ; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 196 "firrtl.l"
{ return kPARENT_L; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 197 "firrtl.l"
{ return kPARENT_R; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 198 "firrtl.l"
{ return kSQUARE_LB; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 199 "firrtl.l"
{ return kSQUARE_RB; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 200 "firrtl.l"
{ return kBRACE_L; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 201 "firrtl.l"
{ return kBRACE_R; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 204 "firrtl.l"
{ 
                                                      BEGIN(NORMAL);
                                                      firrtllval.string_value = strdup(firrtltext);
                                                      return kUNSIGNEDINT; 
                                                    }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 209 "firrtl.l"
{ 
                                                      BEGIN(NORMAL);
                                                      firrtllval.string_value = strdup(firrtltext);
                                                      return kSIGNEDINT; 
                                                    }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 214 "firrtl.l"
{ 
                                                      BEGIN(NORMAL);
                                                      firrtllval.string_value = strdup(firrtltext);
                                                      return kHEXLIT; 
                                                    }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 219 "firrtl.l"
{ 
                                                      BEGIN(NORMAL);
                                                      firrtllval.string_value = strdup(firrtltext);
                                                      return kOCTALLIT; 
                                                    }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 224 "firrtl.l"
{ 
                                                      BEGIN(NORMAL);
                                                      firrtllval.string_value = strdup(firrtltext);
                                                      return kBINARYLIT; 
                                                    }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 229 "firrtl.l"
{ 
                                                      firrtllval.string_value = strdup(firrtltext);
                                                      return kDOUBLELIT; 
                                                    }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 233 "firrtl.l"
{
                                                      BEGIN(NORMAL);
                                                      firrtllval.string_value = strdup(firrtltext);
                                                      return kQUOTED_STRING;
                                                    }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 238 "firrtl.l"
{
                                                      BEGIN(NORMAL);
                                                      firrtllval.string_value = strdup(firrtltext);
                                                      return kQUOTED_STRING;
                                                    }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 245 "firrtl.l"
{
                            BEGIN(NORMAL);
                            firrtllval.string_value = strdup(firrtltext);
                            return kID;
                          }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 250 "firrtl.l"
{
                            BEGIN(NORMAL);
                            firrtllval.string_value = strdup(firrtltext);
                            return kRELAXED_ID;
                          } 
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 257 "firrtl.l"
{ /*do nothing*/ }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 258 "firrtl.l"
{
                                  firrtllval.string_value = strdup(firrtltext);
                                  return kINFO;
                                }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 262 "firrtl.l"
{
                                  firrtlcolumn = 1;
                                  firrtllval.string_value = strdup(firrtltext); 
                                  return kCOMMENT;
                                }
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 267 "firrtl.l"
{
                                  firrtlcolumn = 1;
                                  BEGIN(INITIAL); 
                                  return kNEWLINE;
                                }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 275 "firrtl.l"
{
                          firrtllval.string_value = strdup(firrtltext);
                          BEGIN(NORMAL);
                          return kINDENT;
                        }
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 280 "firrtl.l"
{ 
                          firrtllval.string_value = strdup("");
                          unput(firrtltext[0]);
                          firrtlcolumn = firrtlcolumn - 1;
                          BEGIN(NORMAL);
                          return kINDENT;
                        }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(NORMAL):
case YY_STATE_EOF(STATE_DOUBLE_QUOTED):
case YY_STATE_EOF(STATE_SINGLE_QUOTED):
#line 287 "firrtl.l"
{ 
                          yyterminate();
                        }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 290 "firrtl.l"
ECHO;
	YY_BREAK
#line 1861 "firrtl_lex.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed firrtlin at a new source and called
			 * firrtllex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = firrtlin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( firrtlwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * firrtltext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of firrtllex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					firrtlrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			firrtlrestart(firrtlin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) firrtlrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 448 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 448 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 447);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up firrtltext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --firrtllineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					firrtlrestart(firrtlin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( firrtlwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve firrtltext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    firrtllineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void firrtlrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        firrtlensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            firrtl_create_buffer(firrtlin,YY_BUF_SIZE );
	}

	firrtl_init_buffer(YY_CURRENT_BUFFER,input_file );
	firrtl_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void firrtl_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		firrtlpop_buffer_state();
	 *		firrtlpush_buffer_state(new_buffer);
     */
	firrtlensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	firrtl_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (firrtlwrap()) processing, but the only time this flag
	 * is looked at is after firrtlwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void firrtl_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	firrtlin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE firrtl_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) firrtlalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in firrtl_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) firrtlalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in firrtl_create_buffer()" );

	b->yy_is_our_buffer = 1;

	firrtl_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with firrtl_create_buffer()
 * 
 */
    void firrtl_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		firrtlfree((void *) b->yy_ch_buf  );

	firrtlfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a firrtlrestart() or at EOF.
 */
    static void firrtl_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	firrtl_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then firrtl_init_buffer was _probably_
     * called from firrtlrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void firrtl_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		firrtl_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void firrtlpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	firrtlensure_buffer_stack();

	/* This block is copied from firrtl_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from firrtl_switch_to_buffer. */
	firrtl_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void firrtlpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	firrtl_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		firrtl_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void firrtlensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)firrtlalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in firrtlensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)firrtlrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in firrtlensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE firrtl_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) firrtlalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in firrtl_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	firrtl_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to firrtllex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       firrtl_scan_bytes() instead.
 */
YY_BUFFER_STATE firrtl_scan_string (yyconst char * yystr )
{
    
	return firrtl_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to firrtllex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE firrtl_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) firrtlalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in firrtl_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = firrtl_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in firrtl_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up firrtltext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		firrtltext[firrtlleng] = (yy_hold_char); \
		(yy_c_buf_p) = firrtltext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		firrtlleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int firrtlget_lineno  (void)
{
        
    return firrtllineno;
}

/** Get the input stream.
 * 
 */
FILE *firrtlget_in  (void)
{
        return firrtlin;
}

/** Get the output stream.
 * 
 */
FILE *firrtlget_out  (void)
{
        return firrtlout;
}

/** Get the length of the current token.
 * 
 */
int firrtlget_leng  (void)
{
        return firrtlleng;
}

/** Get the current token.
 * 
 */

char *firrtlget_text  (void)
{
        return firrtltext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void firrtlset_lineno (int  line_number )
{
    
    firrtllineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see firrtl_switch_to_buffer
 */
void firrtlset_in (FILE *  in_str )
{
        firrtlin = in_str ;
}

void firrtlset_out (FILE *  out_str )
{
        firrtlout = out_str ;
}

int firrtlget_debug  (void)
{
        return firrtl_flex_debug;
}

void firrtlset_debug (int  bdebug )
{
        firrtl_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from firrtllex_destroy(), so don't allocate here.
     */

    /* We do not touch firrtllineno unless the option is enabled. */
    firrtllineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    firrtlin = stdin;
    firrtlout = stdout;
#else
    firrtlin = (FILE *) 0;
    firrtlout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * firrtllex_init()
     */
    return 0;
}

/* firrtllex_destroy is for both reentrant and non-reentrant scanners. */
int firrtllex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		firrtl_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		firrtlpop_buffer_state();
	}

	/* Destroy the stack itself. */
	firrtlfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * firrtllex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *firrtlalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *firrtlrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void firrtlfree (void * ptr )
{
	free( (char *) ptr );	/* see firrtlrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 290 "firrtl.l"


