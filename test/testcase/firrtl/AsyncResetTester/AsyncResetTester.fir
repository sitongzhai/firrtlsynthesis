;buildInfoPackage: chisel3, version: 3.4-SNAPSHOT, scalaVersion: 2.12.12, sbtVersion: 1.3.9
circuit AsyncResetTester : 
  module AsyncResetTester : 
    input clock : Clock
    input reset : UInt<1>
    output io : {}
    
    reg cDiv_value : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Counter.scala 60:40]
    wire cDiv : UInt<1>
    cDiv <= UInt<1>("h00")
    when UInt<1>("h01") : @[Counter.scala 118:17]
      node cDiv_wrap_wrap = eq(cDiv_value, UInt<2>("h03")) @[Counter.scala 72:24]
      node _cDiv_wrap_value_T = add(cDiv_value, UInt<1>("h01")) @[Counter.scala 76:24]
      node _cDiv_wrap_value_T_1 = tail(_cDiv_wrap_value_T, 1) @[Counter.scala 76:24]
      cDiv_value <= _cDiv_wrap_value_T_1 @[Counter.scala 76:15]
      cDiv <= cDiv_wrap_wrap @[Counter.scala 118:24]
      skip @[Counter.scala 118:17]
    node slowClk = asClock(cDiv) @[AsyncResetSpec.scala 14:22]
    reg count : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[Counter.scala 60:40]
    wire done : UInt<1>
    done <= UInt<1>("h00")
    when UInt<1>("h01") : @[Counter.scala 118:17]
      node wrap_wrap = eq(count, UInt<4>("h0f")) @[Counter.scala 72:24]
      node _wrap_value_T = add(count, UInt<1>("h01")) @[Counter.scala 76:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[Counter.scala 76:24]
      count <= _wrap_value_T_1 @[Counter.scala 76:15]
      done <= wrap_wrap @[Counter.scala 118:24]
      skip @[Counter.scala 118:17]
    reg asyncResetNext : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[AsyncResetSpec.scala 18:31]
    node _asyncResetNext_T = eq(count, UInt<3>("h04")) @[AsyncResetSpec.scala 19:27]
    asyncResetNext <= _asyncResetNext_T @[AsyncResetSpec.scala 19:18]
    node asyncReset = asAsyncReset(asyncResetNext) @[AsyncResetSpec.scala 20:35]
    reg reg_ : UInt<8>, slowClk with : (reset => (asyncReset, UInt<8>("h07b"))) @[AsyncResetSpec.scala 23:12]
    reg_ <= UInt<3>("h05") @[AsyncResetSpec.scala 25:7]
    node _T = eq(count, UInt<2>("h03")) @[AsyncResetSpec.scala 27:15]
    when _T : @[AsyncResetSpec.scala 27:24]
      node _T_1 = eq(reg_, UInt<3>("h05")) @[AsyncResetSpec.scala 28:16]
      node _T_2 = bits(reset, 0, 0) @[AsyncResetSpec.scala 28:11]
      node _T_3 = or(_T_1, _T_2) @[AsyncResetSpec.scala 28:11]
      node _T_4 = eq(_T_3, UInt<1>("h00")) @[AsyncResetSpec.scala 28:11]
      when _T_4 : @[AsyncResetSpec.scala 28:11]
        printf(clock, UInt<1>(1), "Assertion failed\n    at AsyncResetSpec.scala:28 assert(reg_ === 5.U)\n") @[AsyncResetSpec.scala 28:11]
        stop(clock, UInt<1>(1), 1) @[AsyncResetSpec.scala 28:11]
        skip @[AsyncResetSpec.scala 28:11]
      skip @[AsyncResetSpec.scala 27:24]
    node _T_5 = geq(count, UInt<3>("h05")) @[AsyncResetSpec.scala 30:15]
    node _T_6 = lt(count, UInt<3>("h07")) @[AsyncResetSpec.scala 30:31]
    node _T_7 = and(_T_5, _T_6) @[AsyncResetSpec.scala 30:22]
    when _T_7 : @[AsyncResetSpec.scala 30:38]
      node _T_8 = eq(reg_, UInt<7>("h07b")) @[AsyncResetSpec.scala 31:16]
      node _T_9 = bits(reset, 0, 0) @[AsyncResetSpec.scala 31:11]
      node _T_10 = or(_T_8, _T_9) @[AsyncResetSpec.scala 31:11]
      node _T_11 = eq(_T_10, UInt<1>("h00")) @[AsyncResetSpec.scala 31:11]
      when _T_11 : @[AsyncResetSpec.scala 31:11]
        printf(clock, UInt<1>(1), "Assertion failed\n    at AsyncResetSpec.scala:31 assert(reg_ === 123.U)\n") @[AsyncResetSpec.scala 31:11]
        stop(clock, UInt<1>(1), 1) @[AsyncResetSpec.scala 31:11]
        skip @[AsyncResetSpec.scala 31:11]
      skip @[AsyncResetSpec.scala 30:38]
    else : @[AsyncResetSpec.scala 32:30]
      node _T_12 = geq(count, UInt<3>("h07")) @[AsyncResetSpec.scala 32:22]
      when _T_12 : @[AsyncResetSpec.scala 32:30]
        node _T_13 = eq(reg_, UInt<3>("h05")) @[AsyncResetSpec.scala 33:16]
        node _T_14 = bits(reset, 0, 0) @[AsyncResetSpec.scala 33:11]
        node _T_15 = or(_T_13, _T_14) @[AsyncResetSpec.scala 33:11]
        node _T_16 = eq(_T_15, UInt<1>("h00")) @[AsyncResetSpec.scala 33:11]
        when _T_16 : @[AsyncResetSpec.scala 33:11]
          printf(clock, UInt<1>(1), "Assertion failed\n    at AsyncResetSpec.scala:33 assert(reg_ === 5.U)\n") @[AsyncResetSpec.scala 33:11]
          stop(clock, UInt<1>(1), 1) @[AsyncResetSpec.scala 33:11]
          skip @[AsyncResetSpec.scala 33:11]
        skip @[AsyncResetSpec.scala 32:30]
    when done : @[AsyncResetSpec.scala 36:15]
      node _T_17 = bits(reset, 0, 0) @[AsyncResetSpec.scala 37:9]
      node _T_18 = eq(_T_17, UInt<1>("h00")) @[AsyncResetSpec.scala 37:9]
      when _T_18 : @[AsyncResetSpec.scala 37:9]
        stop(clock, UInt<1>(1), 0) @[AsyncResetSpec.scala 37:9]
        skip @[AsyncResetSpec.scala 37:9]
      skip @[AsyncResetSpec.scala 36:15]
    
