;buildInfoPackage: chisel3, version: 3.4-SNAPSHOT, scalaVersion: 2.12.12, sbtVersion: 1.3.9
circuit IntervalChainedSubTester : 
  module IntervalChainedSubTester : 
    input clock : Clock
    input reset : UInt<1>
    output io : {}
    
    wire intervalResult1 : Interval[?, ?].0 @[IntervalSpec.scala 390:29]
    wire intervalResult2 : Interval[?, ?].0 @[IntervalSpec.scala 391:29]
    wire uIntResult : UInt @[IntervalSpec.scala 392:24]
    wire sIntResult : SInt @[IntervalSpec.scala 393:24]
    wire fixedResult : Fixed @[IntervalSpec.scala 394:25]
    node _intervalResult1_T = sub(asInterval(UInt<6>("h011"), 17, 17, 0), asInterval(UInt<3>("h02"), 2, 2, 0)) @[IntervalSpec.scala 396:27]
    node _intervalResult1_T_1 = sub(_intervalResult1_T, asInterval(UInt<3>("h02"), 2, 2, 0)) @[IntervalSpec.scala 396:33]
    node _intervalResult1_T_2 = sub(_intervalResult1_T_1, asInterval(UInt<3>("h02"), 2, 2, 0)) @[IntervalSpec.scala 396:39]
    node _intervalResult1_T_3 = sub(_intervalResult1_T_2, asInterval(UInt<3>("h02"), 2, 2, 0)) @[IntervalSpec.scala 396:45]
    node _intervalResult1_T_4 = sub(_intervalResult1_T_3, asInterval(UInt<3>("h02"), 2, 2, 0)) @[IntervalSpec.scala 396:51]
    node _intervalResult1_T_5 = sub(_intervalResult1_T_4, asInterval(UInt<3>("h02"), 2, 2, 0)) @[IntervalSpec.scala 396:57]
    intervalResult1 <= _intervalResult1_T_5 @[IntervalSpec.scala 396:19]
    node _intervalResult2_T = sub(asInterval(UInt<6>("h011"), 17, 17, 0), asInterval(UInt<3>("h02"), 2, 2, 0)) @[IntervalSpec.scala 397:27]
    node _intervalResult2_T_1 = sub(_intervalResult2_T, asInterval(UInt<3>("h02"), 2, 2, 0)) @[IntervalSpec.scala 397:34]
    node _intervalResult2_T_2 = sub(_intervalResult2_T_1, asInterval(UInt<3>("h02"), 2, 2, 0)) @[IntervalSpec.scala 397:41]
    node _intervalResult2_T_3 = sub(_intervalResult2_T_2, asInterval(UInt<3>("h02"), 2, 2, 0)) @[IntervalSpec.scala 397:48]
    node _intervalResult2_T_4 = sub(_intervalResult2_T_3, asInterval(UInt<3>("h02"), 2, 2, 0)) @[IntervalSpec.scala 397:55]
    node _intervalResult2_T_5 = sub(_intervalResult2_T_4, asInterval(UInt<3>("h02"), 2, 2, 0)) @[IntervalSpec.scala 397:62]
    intervalResult2 <= _intervalResult2_T_5 @[IntervalSpec.scala 397:19]
    node _uIntResult_T = sub(UInt<5>("h011"), UInt<2>("h02")) @[IntervalSpec.scala 398:22]
    node _uIntResult_T_1 = asUInt(_uIntResult_T) @[IntervalSpec.scala 398:22]
    node _uIntResult_T_2 = sub(_uIntResult_T_1, UInt<2>("h02")) @[IntervalSpec.scala 398:29]
    node _uIntResult_T_3 = asUInt(_uIntResult_T_2) @[IntervalSpec.scala 398:29]
    node _uIntResult_T_4 = sub(_uIntResult_T_3, UInt<2>("h02")) @[IntervalSpec.scala 398:36]
    node _uIntResult_T_5 = asUInt(_uIntResult_T_4) @[IntervalSpec.scala 398:36]
    node _uIntResult_T_6 = sub(_uIntResult_T_5, UInt<2>("h02")) @[IntervalSpec.scala 398:43]
    node _uIntResult_T_7 = asUInt(_uIntResult_T_6) @[IntervalSpec.scala 398:43]
    node _uIntResult_T_8 = sub(_uIntResult_T_7, UInt<2>("h02")) @[IntervalSpec.scala 398:50]
    node _uIntResult_T_9 = asUInt(_uIntResult_T_8) @[IntervalSpec.scala 398:50]
    node _uIntResult_T_10 = sub(_uIntResult_T_9, UInt<2>("h02")) @[IntervalSpec.scala 398:57]
    node _uIntResult_T_11 = asUInt(_uIntResult_T_10) @[IntervalSpec.scala 398:57]
    uIntResult <= _uIntResult_T_11 @[IntervalSpec.scala 398:14]
    node _fixedResult_T = sub(asFixedPoint(UInt<6>("h011"), 0), asFixedPoint(UInt<3>("h02"), 0)) @[IntervalSpec.scala 399:31]
    node _fixedResult_T_1 = sub(_fixedResult_T, asFixedPoint(UInt<3>("h02"), 0)) @[IntervalSpec.scala 399:46]
    node _fixedResult_T_2 = sub(_fixedResult_T_1, asFixedPoint(UInt<3>("h02"), 0)) @[IntervalSpec.scala 399:61]
    node _fixedResult_T_3 = sub(_fixedResult_T_2, asFixedPoint(UInt<3>("h02"), 0)) @[IntervalSpec.scala 399:76]
    node _fixedResult_T_4 = sub(_fixedResult_T_3, asFixedPoint(UInt<3>("h02"), 0)) @[IntervalSpec.scala 400:14]
    node _fixedResult_T_5 = sub(_fixedResult_T_4, asFixedPoint(UInt<3>("h02"), 0)) @[IntervalSpec.scala 400:29]
    fixedResult <= _fixedResult_T_5 @[IntervalSpec.scala 399:15]
    node _sIntResult_T = sub(asSInt(UInt<6>("h011")), asSInt(UInt<3>("h02"))) @[IntervalSpec.scala 401:22]
    node _sIntResult_T_1 = sub(_sIntResult_T, asSInt(UInt<3>("h02"))) @[IntervalSpec.scala 401:29]
    node _sIntResult_T_2 = sub(_sIntResult_T_1, asSInt(UInt<3>("h02"))) @[IntervalSpec.scala 401:36]
    node _sIntResult_T_3 = sub(_sIntResult_T_2, asSInt(UInt<3>("h02"))) @[IntervalSpec.scala 401:43]
    node _sIntResult_T_4 = sub(_sIntResult_T_3, asSInt(UInt<3>("h02"))) @[IntervalSpec.scala 401:50]
    node _sIntResult_T_5 = sub(_sIntResult_T_4, asSInt(UInt<3>("h02"))) @[IntervalSpec.scala 401:57]
    sIntResult <= _sIntResult_T_5 @[IntervalSpec.scala 401:14]
    node _T = eq(uIntResult, UInt<3>("h05")) @[IntervalSpec.scala 403:21]
    node _T_1 = bits(reset, 0, 0) @[IntervalSpec.scala 403:9]
    node _T_2 = or(_T, _T_1) @[IntervalSpec.scala 403:9]
    node _T_3 = eq(_T_2, UInt<1>("h00")) @[IntervalSpec.scala 403:9]
    when _T_3 : @[IntervalSpec.scala 403:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at IntervalSpec.scala:403 assert(uIntResult === 5.U)\n") @[IntervalSpec.scala 403:9]
      stop(clock, UInt<1>(1), 1) @[IntervalSpec.scala 403:9]
      skip @[IntervalSpec.scala 403:9]
    node _T_4 = eq(sIntResult, asSInt(UInt<4>("h05"))) @[IntervalSpec.scala 404:21]
    node _T_5 = bits(reset, 0, 0) @[IntervalSpec.scala 404:9]
    node _T_6 = or(_T_4, _T_5) @[IntervalSpec.scala 404:9]
    node _T_7 = eq(_T_6, UInt<1>("h00")) @[IntervalSpec.scala 404:9]
    when _T_7 : @[IntervalSpec.scala 404:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at IntervalSpec.scala:404 assert(sIntResult === 5.S)\n") @[IntervalSpec.scala 404:9]
      stop(clock, UInt<1>(1), 1) @[IntervalSpec.scala 404:9]
      skip @[IntervalSpec.scala 404:9]
    node _T_8 = asUInt(fixedResult) @[IntervalSpec.scala 405:22]
    node _T_9 = eq(_T_8, UInt<3>("h05")) @[IntervalSpec.scala 405:29]
    node _T_10 = bits(reset, 0, 0) @[IntervalSpec.scala 405:9]
    node _T_11 = or(_T_9, _T_10) @[IntervalSpec.scala 405:9]
    node _T_12 = eq(_T_11, UInt<1>("h00")) @[IntervalSpec.scala 405:9]
    when _T_12 : @[IntervalSpec.scala 405:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at IntervalSpec.scala:405 assert(fixedResult.asUInt === 5.U)\n") @[IntervalSpec.scala 405:9]
      stop(clock, UInt<1>(1), 1) @[IntervalSpec.scala 405:9]
      skip @[IntervalSpec.scala 405:9]
    node _T_13 = eq(intervalResult1, asInterval(UInt<4>("h05"), 5, 5, 0)) @[IntervalSpec.scala 406:26]
    node _T_14 = bits(reset, 0, 0) @[IntervalSpec.scala 406:9]
    node _T_15 = or(_T_13, _T_14) @[IntervalSpec.scala 406:9]
    node _T_16 = eq(_T_15, UInt<1>("h00")) @[IntervalSpec.scala 406:9]
    when _T_16 : @[IntervalSpec.scala 406:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at IntervalSpec.scala:406 assert(intervalResult1 === 5.I)\n") @[IntervalSpec.scala 406:9]
      stop(clock, UInt<1>(1), 1) @[IntervalSpec.scala 406:9]
      skip @[IntervalSpec.scala 406:9]
    node _T_17 = eq(intervalResult2, asInterval(UInt<4>("h05"), 5, 5, 0)) @[IntervalSpec.scala 407:26]
    node _T_18 = bits(reset, 0, 0) @[IntervalSpec.scala 407:9]
    node _T_19 = or(_T_17, _T_18) @[IntervalSpec.scala 407:9]
    node _T_20 = eq(_T_19, UInt<1>("h00")) @[IntervalSpec.scala 407:9]
    when _T_20 : @[IntervalSpec.scala 407:9]
      printf(clock, UInt<1>(1), "Assertion failed\n    at IntervalSpec.scala:407 assert(intervalResult2 === 5.I)\n") @[IntervalSpec.scala 407:9]
      stop(clock, UInt<1>(1), 1) @[IntervalSpec.scala 407:9]
      skip @[IntervalSpec.scala 407:9]
    node _T_21 = bits(reset, 0, 0) @[IntervalSpec.scala 409:7]
    node _T_22 = eq(_T_21, UInt<1>("h00")) @[IntervalSpec.scala 409:7]
    when _T_22 : @[IntervalSpec.scala 409:7]
      stop(clock, UInt<1>(1), 0) @[IntervalSpec.scala 409:7]
      skip @[IntervalSpec.scala 409:7]
    